# nginx conf file for reverse proxying of Perforce P4Web on a local system at port 8080 and presenting it at port 443 (HTTPS) instead

user                                    www www;
worker_processes                        2;
error_log                               /var/log/nginx/error.log;

events {
    # After increasing this value You probably should increase limit
    # of file descriptors (for example in start_precmd in startup script)
    worker_connections                  1024;
    # multi_accept                      on;
}

http {
    include                             /etc/nginx/mime.types;
    access_log                          /var/log/nginx/access.log;
    sendfile                            on;
    tcp_nopush                          on;
    keepalive_timeout                   60;
    tcp_nodelay                         on;
    reset_timedout_connection           on;
    gzip                                on;
    gzip_min_length                     8096;
    gzip_disable                        "MSIE [1-6]\.(?!.*SV1)";
    gzip_proxied                        expired no-cache no-store private auth;
    gzip_types                          text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    client_max_body_size                10m;
    client_body_buffer_size             128k;
    client_header_buffer_size           64k;
# Disable proxy level caching for Perforce
    proxy_buffering                     off;
    proxy_connect_timeout               5;
    proxy_read_timeout                  60;
# Don't tell anyone what version we are running
    server_tokens                       off;
# Block unwanted visitors, also allows us to put up a maintenance page to tell users we are down and allow through only those people who will be testing/fixing the app
    include                             blockips.conf;
    ssi                                 on;

# force redirect of http to https, application will be available only over https
server {
    listen                              IP_ADDRESS:80 default_server;
    server_name                         localhost;
    rewrite                             ^(.*) https://HOSTNAME$1 permanent;
    }

# https server
# domain is HOSTNAME
# traffic is going to local web server at port 8080 over normal http
# front nginx proxy server will hold the ssl session
server {
    listen                              IP_ADDRESS:443 default_server ssl;
    server_name                         localhost;
    root                                /srv/www;
    index                               index.html;
    ssl                                 on;
    ssl_certificate                     /etc/ssl/certs/HOSTNAME.crt;
    ssl_certificate_key                 /etc/ssl/private_keys/HOSTNAME.key;
    ssl_session_timeout                 5m;
    ssl_protocols                       SSLv2 SSLv3 TLSv1;
    ssl_ciphers                         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers           on;
    access_log                          /var/log/nginx/server-access.log;
    error_log                           /var/log/nginx/server-error.log debug;
    
    location / {
        proxy_pass                      http://127.0.0.1:8080;
        proxy_set_header                Host                    $host;
        proxy_set_header                X-Real-IP               $remote_addr;
        proxy_set_header                X-Forwarded-for         $remote_addr;
        port_in_redirect                off;
        proxy_redirect                  http://127.0.0.1:8080/  /;
        proxy_connect_timeout           5;
        proxy_buffering                 off;
        access_log                      /var/log/nginx/p4web-access.log;
        error_log                       /var/log/nginx/p4web-error.log debug;
    }

    location /MWG_images/ {  
        proxy_pass                      http://127.0.0.1:8181;
        access_log                      /var/log/nginx/images-access.log;
        error_log                       /var/log/nginx/images-error.log debug;
    }

    # redirect server error pages to the appropriate static page
    error_page                          403 /error/403.html;
    error_page                          404 /error/404.html;
    error_page                          405 /error/405.html;
    error_page                          500 501 504 /error/50x.html;
    error_page                          502 /error/502.html;
    error_page                          503 /error/503.html;

    location ^~ /error/ {
        internal;
        root                            /srv/www;
    }
  }

# Gives access to downtime images etc.
server {
    listen                              127.0.0.1:8181;
    server_name                         localhost;
    root                                /srv/www;
    index                               index.html;
}
 
}
